services:
    caddy:
        image: caddy:latest
        container_name: caddy
        restart: unless-stopped
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - caddy_data:/data
            - ${DATA_FOLDER}/caddy_config:/config
            - ${DATA_FOLDER}/caddy_config/Caddyfile:/etc/caddy/Caddyfile

    postgres:
        image: pgvector/pgvector:pg17-trixie
        restart: always
        container_name: postgres
        environment:
            - POSTGRES_USER
            - POSTGRES_PASSWORD
            - POSTGRES_DB
            - POSTGRES_NON_ROOT_USER
            - POSTGRES_NON_ROOT_PASSWORD
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
                ]
            interval: 5s
            timeout: 5s
            retries: 10

    n8n:
        image: docker.n8n.io/n8nio/n8n
        container_name: n8n
        restart: always
        ports:
            - 5678:5678
        environment:
            - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
            - N8N_PORT=5678
            - N8N_PROTOCOL=https
            - NODE_ENV=production
            - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
            - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
            - DB_TYPE=postgresdb
            - DB_POSTGRESDB_HOST=postgres
            - DB_POSTGRESDB_PORT=5432
            - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
            - DB_POSTGRESDB_USER=${POSTGRES_NON_ROOT_USER}
            - DB_POSTGRESDB_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
        deploy:
            resources:
                limits:
                    cpus: "1"
                    memory: 1g
        volumes:
            - n8n_data:/home/node/.n8n
            - ${DATA_FOLDER}/local_files:/files
        links:
            - postgres
        depends_on:
            postgres:
                condition: service_healthy

    ollama:
        image: ollama/ollama:latest
        container_name: ollama
        restart: unless-stopped
        tty: true
        read_only: true
        security_opt:
            - no-new-privileges:true
        cap_drop:
            - ALL
        cap_add:
            - ALL
        volumes:
            - ollama:/root/.ollama
        deploy:
            resources:
                limits:
                    memory: 5g
                    cpus: "2"
                reservations:
                    memory: 4g
    open-webui:
        image: ghcr.io/open-webui/open-webui:main
        container_name: open-webui
        restart: unless-stopped
        depends_on:
            - ollama
        environment:
            - OLLAMA_BASE_URL=http://ollama:11434
            - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}
        volumes:
            - open-webui:/app/backend/data
        extra_hosts:
            - "host.docker.internal:host-gateway"

    crawl4ai:
        image: unclecode/crawl4ai:latest
        container_name: crawl4ai
        restart: unless-stopped
        shm_size: "1g"
        ports:
            - "11235:11235"

volumes:
    caddy_data:
        external: true
    n8n_data:
        external: true
    ollama:
    open-webui:
    postgres_data:
